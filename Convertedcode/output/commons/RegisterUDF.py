def register(sqlContext):
	sqlContext.sql("use default")
	sqlContext.sql("DROP FUNCTION IF EXISTS TO_NUMBER")
	sqlContext.sql("CREATE TEMPORARY FUNCTION TO_NUMBER AS 'com.impetus.idw.wmg.bdwudf.hive.oracle.UDFToNumber'")
	sqlContext.sql("DROP FUNCTION IF EXISTS TO_DECIMAL")
	sqlContext.sql("CREATE TEMPORARY FUNCTION TO_DECIMAL AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFToDecimal'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UNICHR")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UNICHR AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFUnichr'")
	sqlContext.sql("DROP FUNCTION IF EXISTS CHR_ORA")
	sqlContext.sql("CREATE TEMPORARY FUNCTION CHR_ORA AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFChr'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UDF_IS_NUMBER")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UDF_IS_NUMBER AS 'com.impetus.idw.wmg.bdwudf.hive.teradata.UDFIsInteger'")
	sqlContext.sql("DROP FUNCTION IF EXISTS udf_decode_nz")
	sqlContext.sql("CREATE TEMPORARY FUNCTION udf_decode_nz AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFDecode'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UDF_CONCAT")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UDF_CONCAT AS 'com.impetus.idw.wmg.bdwudf.hive.oracle.UDFConcat'")
	sqlContext.sql("DROP FUNCTION IF EXISTS udf_to_timestamp")
	sqlContext.sql("CREATE TEMPORARY FUNCTION udf_to_timestamp AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFToTimestamp'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UDF_INSTR")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UDF_INSTR AS 'com.impetus.idw.wmg.bdwudf.hive.oracle.UDFInstr'")
	sqlContext.sql("DROP FUNCTION IF EXISTS IS_DATE")
	sqlContext.sql("CREATE TEMPORARY FUNCTION IS_DATE AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFIsDate'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UDF_IS_DATE")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UDF_IS_DATE AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFIsDate'")
	sqlContext.sql("DROP FUNCTION IF EXISTS timezone")
	sqlContext.sql("CREATE TEMPORARY FUNCTION timezone AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFTimeZone'")
	sqlContext.sql("DROP FUNCTION IF EXISTS this_quarter")
	sqlContext.sql("CREATE TEMPORARY FUNCTION this_quarter AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFThisQuarter'")
	sqlContext.sql("DROP FUNCTION IF EXISTS next_week")
	sqlContext.sql("CREATE TEMPORARY FUNCTION next_week AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFNextWeek'")
	sqlContext.sql("DROP FUNCTION IF EXISTS add_interval")
	sqlContext.sql("CREATE TEMPORARY FUNCTION add_interval AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFIntervalAdd'")
	sqlContext.sql("DROP FUNCTION IF EXISTS sub_interval")
	sqlContext.sql("CREATE TEMPORARY FUNCTION sub_interval AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFIntervalSub'")
	sqlContext.sql("DROP FUNCTION IF EXISTS unicode")
	sqlContext.sql("CREATE TEMPORARY FUNCTION unicode AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFUnicode'")
	sqlContext.sql("DROP FUNCTION IF EXISTS udf_add_months")
	sqlContext.sql("CREATE TEMPORARY FUNCTION udf_add_months AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFAddMonths'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UDF_TO_DATE")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UDF_TO_DATE AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFToDate'")
	sqlContext.sql("DROP FUNCTION IF EXISTS IS_SPACES")
	sqlContext.sql("CREATE TEMPORARY FUNCTION IS_SPACES AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFIsSpaces'")
	sqlContext.sql("DROP FUNCTION IF EXISTS udf_trim")
	sqlContext.sql("CREATE TEMPORARY FUNCTION udf_trim AS 'com.impetus.idw.wmg.bdwudf.hive.oracle.UDFTrim'")
	sqlContext.sql("DROP FUNCTION IF EXISTS LTRIM_UDF")
	sqlContext.sql("CREATE TEMPORARY FUNCTION LTRIM_UDF AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFLtrim'")
	sqlContext.sql("DROP FUNCTION IF EXISTS RTRIM_UDF")
	sqlContext.sql("CREATE TEMPORARY FUNCTION RTRIM_UDF AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFRtrim'")
	sqlContext.sql("DROP FUNCTION IF EXISTS LPAD_udf")
	sqlContext.sql("CREATE TEMPORARY FUNCTION LPAD_udf AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFlPad'")
	sqlContext.sql("DROP FUNCTION IF EXISTS RPAD_UDF")
	sqlContext.sql("CREATE TEMPORARY FUNCTION RPAD_UDF AS 'com.impetus.idw.wmg.bdwudf.hive.commonudf.UDFRPad'")
	sqlContext.sql("DROP FUNCTION IF EXISTS to_char")
	sqlContext.sql("CREATE TEMPORARY FUNCTION to_char AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFToChar'")
	sqlContext.sql("DROP FUNCTION IF EXISTS to_char_nz")
	sqlContext.sql("CREATE TEMPORARY FUNCTION to_char_nz AS 'com.impetus.idw.wmg.bdwudf.hive.netezza.UDFToChar'")
	sqlContext.sql("DROP FUNCTION IF EXISTS Add_To_Date")
	sqlContext.sql("CREATE TEMPORARY FUNCTION Add_To_Date AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFAddToDate'")
	sqlContext.sql("DROP FUNCTION IF EXISTS CHR")
	#sqlContext.sql("CREATE TEMPORARY FUNCTION CHR AS 'com.impetus.idw.wmg.bdwudf.hive.sqlserver.UDFChar'")
	sqlContext.sql("DROP FUNCTION IF EXISTS GET_DATE_PART")
	sqlContext.sql("CREATE TEMPORARY FUNCTION GET_DATE_PART AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFDatePart'")
	sqlContext.sql("DROP FUNCTION IF EXISTS DATE_DIFF")
	sqlContext.sql("CREATE TEMPORARY FUNCTION DATE_DIFF AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFDateDiff'")
	sqlContext.sql("DROP FUNCTION IF EXISTS TO_INTEGER")
	sqlContext.sql("CREATE TEMPORARY FUNCTION TO_INTEGER  AS 'com.impetus.idw.wmg.bdwudf.hive.oracle.UDFToNumber'")
	sqlContext.sql("DROP FUNCTION IF EXISTS trunc_ora")
	sqlContext.sql("CREATE TEMPORARY FUNCTION trunc_ora AS 'com.impetus.idw.wmg.bdwudf.hive.oracle.UDFTrunc'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UDF_REG_MATCH")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UDF_REG_MATCH AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFRegMatch'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UDF_REPLACE_CHR")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UDF_REPLACE_CHR AS 'com.impetus.idw.wmg.bdwudf.hive.informatica.UDFReplaceChr'")
	sqlContext.sql("DROP FUNCTION IF EXISTS UDF_TO_NUMBER")
	sqlContext.sql("CREATE TEMPORARY FUNCTION UDF_TO_NUMBER AS 'com.impetus.idw.wmg.bdwudf.hive.oracle.UDFToNumber'")

	sqlContext.udf.register("DECODE_UDF", decode)

def decode(key, *values):
	try:
		index = values.index(key)
		value = values[index+1]
		return value
	except:
		return 'null'